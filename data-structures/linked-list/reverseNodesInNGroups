function reverseNGroupRecursive(head, k) {
    let count = 0
    let ptr = head

    while (count < k && ptr) {
        ptr = ptr.next
        count += 1
    }

    if (count === k) {
        const revHead = reverseList(head, k)
        head.next = reverseKGroup(ptr, k)

        return revHead
    }

    return head
}

function reverseList(node, k) {
    let prev = null, curr = node

    while (k) {
        const next = curr.next
        curr.next = prev
        prev = curr
        curr = next

        k -= 1
    }

    return prev
}

function reverseNGroupIterative(head, k) {
    const dummy = new ListNode(0, head)
    let groupPrev = dummy

    while (true) {
        const kth = this.getKth(groupPrev, k)
        if (!kth) break

        const groupNext = kth.next

        let prev = groupNext, curr = groupPrev.next
        while (curr !== groupNext) {
            const next = curr.next
            curr.next = prev
            prev = curr
            curr = next
        }

        const temp = groupPrev.next
        groupPrev.next = kth
        groupPrev = temp
    }

    return dummy.next
}

function getKth(curr, k) {
    while (curr && k > 0) {
        curr = curr.next
        k -= 1
    }

    return curr
}